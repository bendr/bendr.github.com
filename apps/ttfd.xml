<app xmlns="http://bender.igel.co.jp" xmlns:b="http://bender.igel.co.jp/b"
  xmlns:f="http://bender.igel.co.jp/f"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:svg="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  f:x1=".25" f:y1=".1" f:x2=".25" f:y2="1" b:clamp-y="true" f:test-duration="2">

  <title>Transition Timing Function Designer</title>

  <view>
    <target q="head">
      <html:style>
        a { text-decoration: none; color: #ff4040; }
        svg { width: 600px; height: 600px; }
        .tp { position: relative; }
        .t { display: inline-block; position: absolute; width: 20px;
          height: 20px; left: 40px; -webkit-border-radius: 10px;
          -moz-border-radius: 10px; background-color: #08f; }
        .about { width: 600px; }
      </html:style>
    </target>
    <html:p>
      <html:code>transition-timing-function: cubic-bezier(<html:span id="xx1"/>,
        <html:span id="yy1"/>, <html:span id="xx2"/>, <html:span
          id="yy2"/>)</html:code>
      <use href="button.xml" id="button-test">Test</use>
    </html:p>
    <use ref="test-component" id="t"/>
    <svg:svg viewBox="-10 -10 120 120">
      <svg:defs>
        <svg:circle svg:id="point" r="2"/>
      </svg:defs>
      <svg:g>
        <svg:rect width="100" height="100" fill="none" stroke="black"/>
        <svg:g stroke="#f08" stroke-dasharray="2 2">
          <svg:line id="l01" y1="100"/>
          <svg:line id="l23" x2="100"/>
        </svg:g>
        <svg:path stroke="#08f" fill="none" id="path"/>
        <svg:use xlink:href="#point" y="100"/>
        <svg:use xlink:href="#point" x="100"/>
        <use href="drag.xml" id="p1" f:min-x="0" f:max-x="100">
          <svg:use xlink:href="#point" fill="#f08"/>
        </use>
        <use href="drag.xml" id="p2" f:min-x="0" f:max-x="100">
          <svg:use xlink:href="#point" fill="#f08"/>
        </use>
      </svg:g>
    </svg:svg>
    <html:p>
      Presets:
      <use href="button.xml" id="button-ease">ease</use>
      <use href="button.xml" id="button-linear">linear</use>
      <use href="button.xml" id="button-ease-in">ease-in</use>
      <use href="button.xml" id="button-ease-out">ease-out</use>
      <use href="button.xml" id="button-ease-in-out">ease-in-out</use>
      or:
      <use href="button.xml" id="button-random">random</use>
    </html:p>
    <html:p class="about">
      The Transition Timing Function Designer is a simple tool to design
      transition function curves for the <html:a href="http://www.w3.org/TR/css3-transitions/#transition-timing-function-property">CSS
        transition-timing-function property</html:a>, using a BÃ©zier curve. Move
      the two middle points of the curve and see the curve change accordingly,
      select one of the preset values from the specification, or generate random
      values using the buttons above. The <html:em>test</html:em> button tests
      the current setting by moving the blue dot above from left to right
      following the current curve. Additional parameters are
      <html:em>clamp-y</html:em>, which, when unchecked, allows
      <html:em>y</html:em> values outside of the [0, 1] range; and
      <html:em>test-duration</html:em>, which is the duration in second of the
      transition test.
    </html:p>
  </view>

  <component id="test-component">
    <view>
      <html:div class="tp">
        <html:span class="t" id="t"/>
      </html:div>
    </view>
    <script>
      this._prototype.run = function(x1, y1, x2, y2, d)
      {
        flexo.notify(this, "@run");
        this.views.t.style.MozTransitionTimingFunction =
        this.views.t.style.WebkitTransitionTimingFunction =
          "cubic-bezier({0}, {1}, {2}, {3})".fmt(x1, y1, x2, y2);
        this.views.t.style.MozTransitionDuration =
        this.views.t.style.WebkitTransitionDuration = "{0}s".fmt(d / 1000);
        this.views.t.style.MozTransitionProperty =
        this.views.t.style.WebkitTransitionProperty = "left";
        this.views.t.style.left = "540px";
        setTimeout((function() {
            flexo.notify(this, "@stop");
            this.views.t.style.MozTransitionProperty =
            this.views.t.style.WebkitTransitionProperty = "none";
            this.views.t.style.left = "40px";
          }).bind(this), d * 1.5);
      };
    </script>
  </component>

  <watch>
    <get use="$self" property="x1">return 100 * value;</get>
    <set use="p1" property="x"/>
    <set view="l01" attr="x2"/>
    <set view="xx1">return (value / 100).toFixed(2);</set>
  </watch>
  <watch>
    <get use="p1" property="x">return value / 100;</get>
    <set use="$self" property="x1"/>
  </watch>

  <watch>
    <get use="$self" property="y1">return 100 * (1 - value);</get>
    <set use="p1" property="y"/>
    <set view="l01" attr="y2"/>
    <set view="yy1">return (1 - value / 100).toFixed(2);</set>
  </watch>
  <watch>
    <get use="p1" property="y">return 1 - value / 100;</get>
    <set use="$self" property="y1"/>
  </watch>

  <watch>
    <get use="$self" property="x2">return 100 * value;</get>
    <set use="p2" property="x"/>
    <set view="l23" attr="x1"/>
    <set view="xx2">return (value / 100).toFixed(2);</set>
  </watch>
  <watch>
    <get use="p2" property="x">return value / 100;</get>
    <set use="$self" property="x2"/>
  </watch>

  <watch>
    <get use="$self" property="y2">return 100 * (1 - value);</get>
    <set use="p2" property="y"/>
    <set view="l23" attr="y1"/>
    <set view="yy2">return (1 - value / 100).toFixed(2);</set>
  </watch>
  <watch>
    <get use="p2" property="y">return 1 - value / 100;</get>
    <set use="$self" property="y2"/>
  </watch>

  <watch>
    <get use="$self" property="x1"/>
    <get use="$self" property="y1"/>
    <get use="$self" property="x2"/>
    <get use="$self" property="y2"/>
    <set view="path" attr="d">
      return "M0,100C{0},{1} {2},{3} 100,0"
        .fmt(100 * this.properties.x1, 100 * (1 - this.properties.y1),
          100 * this.properties.x2, 100 * (1 - this.properties.y2));
    </set>
  </watch>

  <watch>
    <get use="button-ease" event="@pushed"/>
    <set use="$self" property="x1">return .25;</set>
    <set use="$self" property="y1">return .1;</set>
    <set use="$self" property="x2">return .25;</set>
    <set use="$self" property="y2">return 1;</set>
  </watch>

  <watch>
    <get use="button-linear" event="@pushed"/>
    <set use="$self" property="x1">return 0;</set>
    <set use="$self" property="y1">return 0;</set>
    <set use="$self" property="x2">return 1;</set>
    <set use="$self" property="y2">return 1;</set>
  </watch>

  <watch>
    <get use="button-ease-in" event="@pushed"/>
    <set use="$self" property="x1">return .42;</set>
    <set use="$self" property="y1">return 0;</set>
    <set use="$self" property="x2">return 1;</set>
    <set use="$self" property="y2">return 1;</set>
  </watch>

  <watch>
    <get use="button-ease-out" event="@pushed"/>
    <set use="$self" property="x1">return 0;</set>
    <set use="$self" property="y1">return 0;</set>
    <set use="$self" property="x2">return .58;</set>
    <set use="$self" property="y2">return 1;</set>
  </watch>

  <watch>
    <get use="button-ease-in-out" event="@pushed"/>
    <set use="$self" property="x1">return .42;</set>
    <set use="$self" property="y1">return 0;</set>
    <set use="$self" property="x2">return .58;</set>
    <set use="$self" property="y2">return 1;</set>
  </watch>

  <watch>
    <get use="button-random" event="@pushed"/>
    <set use="$self" property="x1">return Math.random();</set>
    <set use="$self" property="y1">return Math.random();</set>
    <set use="$self" property="x2">return Math.random();</set>
    <set use="$self" property="y2">return Math.random();</set>
  </watch>

  <watch>
    <get use="button-test" event="@pushed">
      this.uses.t.run(this.properties.x1, this.properties.y1,
        this.properties.x2, this.properties.y2,
        this.properties["test-duration"] * 1000);
    </get>
  </watch>

  <watch>
    <get use="t" event="@run"/>
    <set use="button-test" property="enabled">return false;</set>
  </watch>

  <watch>
    <get use="t" event="@stop"/>
    <set use="button-test" property="enabled">return true;</set>
  </watch>

  <watch>
    <get use="$self" property="clamp-y"/>
    <set use="p1" property="min-y">return value ? 0 : -Infinity;</set>
    <set use="p1" property="max-y">return value ? 100 : Infinity;</set>
    <set use="p2" property="min-y">return value ? 0 : -Infinity;</set>
    <set use="p2" property="max-y">return value ? 100 : Infinity;</set>
  </watch>

</app>
