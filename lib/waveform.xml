<component xmlns="http://bender.igel.co.jp" xmlns:b="http://bender.igel.co.jp/b"
  xmlns:e="http://bender.igel.co.jp/e" xmlns:f="http://bender.igel.co.jp/f"
  xmlns:html="http://www.w3.org/1999/xhtml" id="waveform"
  f:scale="9" f:height="120" b:can-play="false">

  <title>Waveform display and playback</title>

  <stylesheet>
    .bender-waveform { position: relative; padding: 0; margin: 0; }
    .bender-waveform * { position: absolute; }
  </stylesheet>

  <view>
    <html:div id="div" class="bender-waveform">
      <html:img id="bg"/>
      <html:canvas id="canvas"/>
    </html:div>
  </view>

  <watch>
    <get property="scale"/>
    <set>
      this.draw_waveform();
    </set>
  </watch>

  <watch>
    <get property="height"/>
    <set view="canvas" attr="height"/>
    <set view="div" css-property="height" e:return="{0}px"/>
    <set>
      this.draw_waveform();
    </set>
  </watch>

  <watch>
    <get event="@rendered">
      this.ac = new webkitAudioContext;
      this.gc = this.views.canvas.getContext("2d");
    </get>
  </watch>

  <watch>
    <get property="uri"/>
    <set value="uri">
      if (uri) this.xhr(uri, { responseType: "arraybuffer" });
    </set>
    <set view="canvas" attr="width" f:return="0"/>
    <set property="can-play" b:return="false"/>
  </watch>

  <watch>
    <get event="@xhr-success" value="req">
      return this.draw_waveform(req.response);
    </get>
    <set property="can-play"/>
  </watch>

  <watch>
    <get event="@xhr-error" value="req">
      alert("Could not load audio file at {0}: {1}"
        .fmt(req._uri, req.response));
    </get>
  </watch>

  <script><![CDATA[

    prototype.play = function()
    {
      if (this.$canPlay) {
        if (this.playing) this.playing.noteOff(0);
        this.playing = this.ac.createBufferSource();
        this.playing.buffer = this.buffer;
        this.playing.connect(this.ac.destination);
        var offset = this.ac.currentTime;
        var waveform = this;
        var animate_cursor = function()
        {
          var t = waveform.ac.currentTime - offset;
          var x = t * waveform.ac.sampleRate / waveform.size;
          waveform.gc.clearRect(0, 0, waveform.views.canvas.width,
            waveform.views.canvas.height);
          if (waveform.playing) {
            waveform.gc.beginPath();
            waveform.gc.moveTo(x + 0.5, 0);
            waveform.gc.lineTo(x + 0.5, waveform.views.canvas.height);
            waveform.gc.strokeStyle = "#ff4040";
            waveform.gc.stroke();
            requestAnimationFrame(animate_cursor);
          }
        };
        this.playing.noteOn(0);
        requestAnimationFrame(animate_cursor);
      } else {
        flexo.log("Cannot play!");
      }
    };

    prototype.stop = function()
    {
      if (this.playing) this.playing.noteOff(0);
      delete this.playing;
    };

    prototype.draw_waveform = function(arraybuffer)
    {
      if (arraybuffer) {
        this.buffer = this.ac.createBuffer(arraybuffer, true)
      }
      if (!this.buffer) return;
      var width = this.buffer.duration * this.$scale;
      if (width <= 0) return;
      var height = this.$height / 2;
      this.size = Math.ceil(this.buffer.length / width);  // window size
      this.views.canvas.width = width;
      this.views.canvas.parentNode.style.width = "{0}px".fmt(width);
      // Show peak amplitude
      this.gc.beginPath();
      for (var x = 0, j = 0; j < this.buffer.length; ++x) {
        var min = 1;
        var max = -1;
        for (var i = 0; i < this.size; ++i) {
          var val = this.buffer.getChannelData(0)[j++];
          if (val < min) min = val;
          if (val > max) max = val;
        }
        this.gc.moveTo(x + 0.5, height * (1 - max) + 0.5);
        this.gc.lineTo(x + 0.5, height * (1 - min) + 0.5);
      }
      this.gc.strokeStyle = "#f67968";
      this.gc.stroke();
      if (this.$showRms) {
        // Show RMS power
        this.gc.beginPath();
        for (var x = 0, j = 0; j < this.buffer.length; ++x) {
          var p = 0;
          for (var i = 0; i < this.size; ++i) {
            p += Math.pow(this.buffer.getChannelData(0)[j++], 2);
          }
          var rms = Math.sqrt(p / this.size);
          this.gc.moveTo(x + 0.5, height * (1 - rms / 2) + 0.5);
          this.gc.lineTo(x + 0.5, height * (1 + rms / 2) + 0.5);
        }
        this.gc.strokeStyle = "#f6a168";
        this.gc.stroke();
      }
      this.gc.beginPath();
      this.gc.moveTo(0, height + 0.5);
      this.gc.lineTo(width, height + 0.5);
      this.gc.strokeStyle = "#f6c968";
      this.gc.stroke();
      this.views.bg.src = this.views.canvas.toDataURL();
      this.gc.clearRect(0, 0, width, this.$height);
      return true;
    };

  ]]></script>

</component>
