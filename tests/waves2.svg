<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1200 768"
  style="background-color: white">

  <!-- SVG version of:
    Parameterize: Wave
    from Form+Code in Design, Art, and Architecture
    by Casey Reas, Chandler McWilliams, and LUST
    Princeton Architectural Press, 2010
    ISBN 9781568989372
    cf. http://formandcode.com/code-examples/parameterize-waves -->

  <title>Waves</title>

  <defs>
    <rect id="rect" x="-20" y="-7.5" width="40" height="15" fill="white"
      stroke="black"/>
  </defs>

  <g transform="translate(30, 30)"/>

  <script><![CDATA[

    var QUARTER_PI = Math.PI / 4;

    var cols = 20;
    var rows = 24;
    var columnOffset = 60;
    var rowOffset = 30;
    var rotationIncrement = 0.15;

    var g = document.querySelector("g");
    for (var i = 0; i < cols; ++i) {
      var col = document.createElementNS("http://www.w3.org/2000/svg", "g");
      col.setAttribute("transform", "translate(" + (i * columnOffset) + ")");
      g.appendChild(col);
      var r = QUARTER_PI - Math.random() * Math.PI / 2;
      var dir = 1;
      for (var j = 0; j < rows; ++j) {
        add_rect(col, i * columnOffset, j * rowOffset, r);
        r += dir * rotationIncrement;
        if (r > QUARTER_PI || r < -QUARTER_PI) dir *= -1;
      }
    }

    function add_rect(col, x, y, r)
    {
      var g = document.createElementNS("http://www.w3.org/2000/svg", "g");
      g.setAttribute("transform", "translate(0, " + y + ")");
      col.appendChild(g);
      var use = document.createElementNS("http://www.w3.org/2000/svg", "use");
      use.setAttributeNS("http://www.w3.org/1999/xlink", "href", "#rect");
      use.setAttribute("transform", "rotate(" + (r / Math.PI * 180) + ")");
      g.appendChild(use);
      var get_point = function(e)
      {
        var p = document.documentElement.createSVGPoint();
        p.x = e.clientX;
        p.y = e.clientY;
        return p.matrixTransform(g.getCTM().inverse());
      };
      use.addEventListener("mousedown", function(e) {
          var p = get_point(e);
          var r0 = Math.atan2(p.y, p.x) - r;
          var move = function(e) {
            var p = get_point(e);
            r = Math.min(Math.max(Math.atan2(p.y, p.x) - r0, -QUARTER_PI),
              QUARTER_PI);
            use.setAttribute("transform",
              "rotate(" + (r * 180 / Math.PI) + ")");
            for (var g_ = g.previousSibling, r_ = r; g_;
              g_ = g_.previousSibling)
            {
              r_ -= dir * rotationIncrement;
              if (r_ > QUARTER_PI || r_ < -QUARTER_PI) dir *= -1;
              g_.firstChild.setAttribute("transform",
                "rotate(" + (r_ / Math.PI * 180) + ")");
            }
            for (var g_ = g.nextSibling, r_ = r; g_; g_ = g_.nextSibling)
            {
              r_ += dir * rotationIncrement;
              if (r_ > QUARTER_PI || r_ < -QUARTER_PI) dir *= -1;
              g_.firstChild.setAttribute("transform",
                "rotate(" + (r_ / Math.PI * 180) + ")");
            }
          };
          var up = function() {
            document.removeEventListener("mousemove", move, false);
            document.removeEventListener("mouseup", up, false);
          };
          document.addEventListener("mousemove", move, false);
          document.addEventListener("mouseup", up, false);
        }, false);
    }

  ]]></script>

</svg>
