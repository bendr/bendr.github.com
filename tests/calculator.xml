<app xmlns="http://bender.igel.co.jp" xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:e="http://bender.igel.co.jp/e" e:op="" e:input="0"
  xmlns:b="http://bender.igel.co.jp/b" b:clear="false"
  xmlns:f="http://bender.igel.co.jp/f" f:rotate="0">
  <title>Simple Calculator</title>

  <import href="/lib/push-button.xml"/>

  <stylesheet>
    body { background-color: #888; font-family: sans-serif; }
    @font-face { font-family: Digital7; src: url("/apps/demos/digital-7.ttf");
      font-weight: normal; font-style: normal; }
    .calculator { width: 412px; background-color: #fd0; padding: 24px;
      margin: 32px auto; -webkit-border-radius: 12px; -moz-border-radius: 12px;
      border-radius: 12px; box-shadow: 4px 4px 8px #444; }
    .screen { position: relative; text-align: right; margin-bottom: 32px;
      height: 96px; background-color: #b3cbb3; padding: 8px;
      box-shadow: inset 1px 1px 5px #444;
      text-shadow: 2px 2px 0px #9ebb9e;
      -webkit-border-radius: 8px; -moz-border-radius: 8px;
      overflow: hidden; text-overflow: ellipsis;
    }
    .value { font-size: 72px; font-family: Digital7, monospace; }
    .op { position: absolute; bottom: 8px; right: 8px; font-size: 36px; }
    .row { height: 88px; margin-top: 16px; position: relative; }
    .row .bender-button { padding: 14px 0 0 0; margin: 0; width: 88px;
      height: 70px; text-align: center; font-size: 48px; position: absolute;
      box-shadow: 1px 1px 5px #444; }
    .row .bender-button:nth-child(2) { left: 108px; }
    .row .bender-button:nth-child(3) { left: 216px; }
    .row .bender-button:nth-child(4) { left: 324px; }
    .bender-button.tall { padding-top: 118px; }
    .bender-button.wide { padding-right: 108px; }
  </stylesheet>

  <view>
    <html:div class="calculator" id="calculator">
      <html:div class="screen">
        <html:span id="value" class="value"/>
        <html:span id="op" class="op"/>
      </html:div>
      <!--
      <html:div class="row">
        <component href="#button" id="c">C</component>
        <component href="#button" id="eq1">=</component>
        <component href="#button" id="div">÷</component>
        <component href="#button" id="mult">×</component>
      </html:div>
      <html:div class="row">
        <component href="#button" id="seven">7</component>
        <component href="#button" id="eight">8</component>
        <component href="#button" id="nine">9</component>
        <component href="#button" id="sub">-</component>
      </html:div>
      <html:div class="row">
        <component href="#button" id="four">4</component>
        <component href="#button" id="five">5</component>
        <component href="#button" id="six">6</component>
        <component href="#button" id="add">+</component>
      </html:div>
      <html:div class="row">
        <component href="#button" id="one">1</component>
        <component href="#button" id="two">2</component>
        <component href="#button" id="three">3</component>
        <component href="#button" id="eq2" e:class="tall">=</component>
      </html:div>
      <html:div class="row">
        <component href="#button" id="zero" e:class="wide">0</component>
        <html:span/>
        <component href="#button" id="period">.</component>
      </html:div>
  -->
    </html:div>
  </view>

  <local-script>
    prototype.ops = {
      "+": function(m, n) { return m + n; },
      "-": function(m, n) { return m - n; },
      "×": function(m, n) { return m * n; },
      "÷": function(m, n) { return m / n; },
      "": function(_, n) { return n; }
    };
    prototype.digits = ["zero", "one", "two", "three", "four", "five", "six",
      "seven", "eight", "nine"];
  </local-script>

  <watch>
    <get event="@ready"/>
    <set>
      var calculator = this.node.view.querySelector(".calculator");
      var row = this.node.ownerDocument.createElementNS(flexo.XHTML_NS, "div");
      row.className = "row";
      calculator.appendChild(row);
      var button = this.node.ownerDocument.createElement("component");
      row.appendChild(button);
      button.setAttribute("href", "#button");
      button.setAttribute("id", "c");
      button.set_text_content("C");
    </set>
  </watch>

  <watch>
    <get property="input"/>
    <set property="n">
      return parseFloat(value);
    </set>
  </watch>

  <watch>
    <get property="n"/>
    <set view="value">
      return value.toString() +
        (this.$input[this.$input.length - 1] === "." ?  "." : "");
    </set>
  </watch>

  <!--
  <watch>
    <get property="op"/>
    <set view="op"/>
  </watch>

  <watch>
    <get view="period" event="@pushed"/>
    <set property="input"><![CDATA[
      if (this.$clear) {
        this.$clear = false;
        this.$m = this.$n;
        return "0.";
      } else if (this.$input.indexOf(".") < 0) {
        return this.$input + ".";
      }
    ]]></set>
  </watch>

  <watch>
    <get view="zero" event="@pushed" e:d="0"/>
    <get view="one" event="@pushed" e:d="1"/>
    <get view="two" event="@pushed" e:d="2"/>
    <get view="three" event="@pushed" e:d="3"/>
    <get view="four" event="@pushed" e:d="4"/>
    <get view="five" event="@pushed" e:d="5"/>
    <get view="six" event="@pushed" e:d="6"/>
    <get view="seven" event="@pushed" e:d="7"/>
    <get view="eight" event="@pushed" e:d="8"/>
    <get view="nine" event="@pushed" e:d="9"/>
    <set property="input">
      if (this.$clear) {
        this.$clear = false;
        this.$m = this.$n;
        return get.$d;
      } else {
        return this.$input + get.$d;
      }
    </set>
  </watch>

  <watch>
    <get view="c" event="@pushed"/>
    <set>
      this.$clear = false;
      this.$op = "";
      this.$input = "0";
      delete this.$m;
    </set>
  </watch>

  <watch>
    <get view="add" event="@pushed" e:op="+"/>
    <get view="sub" event="@pushed" e:op="-"/>
    <get view="div" event="@pushed" e:op="÷"/>
    <get view="mult" event="@pushed" e:op="×"/>
    <set>
      if (!isNaN(this.$m)) {
        var m = this.$n;
        this.$n = this.ops[this.$op](this.$m, this.$n);
        this.$m = m;
      }
      this.$op = get.$op;
      this.$clear = true;
    </set>
  </watch>

  <watch>
    <get view="eq1" event="@pushed"/>
    <get view="eq2" event="@pushed"/>
    <set>
      if (!isNaN(this.$m)) this.$n = this.ops[this.$op](this.$m, this.$n);
      this.$op = "";
      delete this.$m;
      this.$clear = true;
    </set>
  </watch>

  <watch>
    <get dom-event="keydown"/>
    <set><![CDATA[
      if (value.keyCode >= 48 && value.keyCode <= 57) {
        this.views[this.digits[value.keyCode - 48]].push();
      } else if (value.keyCode === 67 || value.keyCode === 27) {
        this.views.c.push();
      } else if (value.keyCode === 13) {
        this.views.eq2.push();
      } else if (value.keyCode === 186) {
        this.views.mult.push();
      } else if (value.keyCode === 187) {
        this.views.add.push();
      } else if (value.keyCode === 189) {
        this.views.sub.push();
      } else if (value.keyCode === 190) {
        this.views.period.push();
      } else if (value.keyCode === 191) {
        this.views.div.push();
      }
    ]]></set>
  </watch>
-->

  <watch>
    <get property="rotate"/>
    <set>
      this.views.calculator.style.WebkitTransform = "rotate({0}deg)".fmt(value);
      this.views.calculator.style.MozTransform = "rotate({0}deg)".fmt(value);
      this.views.calculator.style.OTransform = "rotate({0}deg)".fmt(value);
    </set>
  </watch>

</app>
